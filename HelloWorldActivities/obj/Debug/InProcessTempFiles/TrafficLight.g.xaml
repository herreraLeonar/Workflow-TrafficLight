<?xml version="1.0" encoding="utf-8"?>
<local:TrafficLight local:iGreenLightDelay="0" local:iYellowLightDelay="0" local:iRedLightDelay="0" xmlns="http://schemas.microsoft.com/netfx/2009/xaml/activities" xmlns:av="http://schemas.microsoft.com/winfx/2006/xaml/presentation" xmlns:local="clr-namespace:HelloWorldActivities;assembly=HelloWorldActivities" xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006" xmlns:mca="clr-namespace:Microsoft.CSharp.Activities;assembly=System.Activities" xmlns:sads="http://schemas.microsoft.com/netfx/2010/xaml/activities/debugger" xmlns:sap="http://schemas.microsoft.com/netfx/2009/xaml/activities/presentation" xmlns:sap2010="http://schemas.microsoft.com/netfx/2010/xaml/activities/presentation" xmlns:scg="clr-namespace:System.Collections.Generic;assembly=mscorlib" xmlns:sco="clr-namespace:System.Collections.ObjectModel;assembly=mscorlib" xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  <TextExpression.NamespacesForImplementation>
    <sco:Collection x:TypeArguments="x:String">
      <x:String>System</x:String>
      <x:String>System.Collections.Generic</x:String>
      <x:String>System.Data</x:String>
      <x:String>System.Linq</x:String>
      <x:String>System.Text</x:String>
      <x:String>System.Activities</x:String>
      <x:String>System.ServiceModel.Dispatcher</x:String>
      <x:String>System.Activities.Statements</x:String>
      <x:String>System.ServiceModel</x:String>
    </sco:Collection>
  </TextExpression.NamespacesForImplementation>
  <TextExpression.ReferencesForImplementation>
    <sco:Collection x:TypeArguments="AssemblyReference">
      <AssemblyReference>Microsoft.CSharp</AssemblyReference>
      <AssemblyReference>System</AssemblyReference>
      <AssemblyReference>System.Activities</AssemblyReference>
      <AssemblyReference>System.Core</AssemblyReference>
      <AssemblyReference>System.Data</AssemblyReference>
      <AssemblyReference>System.Runtime.Serialization</AssemblyReference>
      <AssemblyReference>System.ServiceModel</AssemblyReference>
      <AssemblyReference>System.ServiceModel.Activities</AssemblyReference>
      <AssemblyReference>System.Xaml</AssemblyReference>
      <AssemblyReference>System.Xml</AssemblyReference>
      <AssemblyReference>System.Xml.Linq</AssemblyReference>
      <AssemblyReference>mscorlib</AssemblyReference>
      <AssemblyReference>HelloWorldActivities</AssemblyReference>
    </sco:Collection>
  </TextExpression.ReferencesForImplementation>
  <local:TrafficLight.Implementation>
    <Sequence>
      <Sequence.Variables>
        <Variable x:TypeArguments="Variable" Name="corr" />
      </Sequence.Variables>
      <StateMachine>
        <StateMachine.InitialState>
          <State x:Name="__ReferenceID0" DisplayName="RedLight">
            <State.Entry>
              <Sequence>
                <Assign>
                  <Assign.To>
                    <OutArgument x:TypeArguments="x:Int32">
                      <mca:CSharpReference x:TypeArguments="x:Int32">CurrentTime</mca:CSharpReference>
                    </OutArgument>
                  </Assign.To>
                  <Assign.Value>
                    <InArgument x:TypeArguments="x:Int32">0</InArgument>
                  </Assign.Value>
                </Assign>
                <WriteLine Text="Red Light" />
              </Sequence>
            </State.Entry>
            <State.Exit>
              <WriteLine Text="Exit Red Light" />
            </State.Exit>
            <State.Transitions>
              <Transition DisplayName="SwitchToGreen">
                <Transition.Trigger>
                  <Sequence>
                    <Delay Duration="00:00:01" />
                    <Assign>
                      <Assign.To>
                        <OutArgument x:TypeArguments="x:Int32">
                          <mca:CSharpReference x:TypeArguments="x:Int32">CurrentTime</mca:CSharpReference>
                        </OutArgument>
                      </Assign.To>
                      <Assign.Value>
                        <InArgument x:TypeArguments="x:Int32">
                          <mca:CSharpValue x:TypeArguments="x:Int32">CurrentTime+1</mca:CSharpValue>
                        </InArgument>
                      </Assign.Value>
                    </Assign>
                    <local:LogFile>
                      <local:LogFile.StringInput>
                        <InArgument x:TypeArguments="x:String">
                          <mca:CSharpValue x:TypeArguments="x:String">"Green Light "+CurrentTime.ToString()</mca:CSharpValue>
                        </InArgument>
                      </local:LogFile.StringInput>
                    </local:LogFile>
                  </Sequence>
                </Transition.Trigger>
                <Transition.Condition>
                  <mca:CSharpValue x:TypeArguments="x:Boolean">CurrentTime&gt;iGreenLightDelay</mca:CSharpValue>
                </Transition.Condition>
                <Transition.To>
                  <State x:Name="__ReferenceID1" DisplayName="GreenLight">
                    <State.Entry>
                      <Sequence>
                        <Assign>
                          <Assign.To>
                            <OutArgument x:TypeArguments="x:Int32">
                              <mca:CSharpReference x:TypeArguments="x:Int32">CurrentTime</mca:CSharpReference>
                            </OutArgument>
                          </Assign.To>
                          <Assign.Value>
                            <InArgument x:TypeArguments="x:Int32">0</InArgument>
                          </Assign.Value>
                        </Assign>
                        <WriteLine Text="Green Light" />
                      </Sequence>
                    </State.Entry>
                    <State.Exit>
                      <WriteLine Text="Exit Green Light" />
                    </State.Exit>
                    <State.Transitions>
                      <Transition DisplayName="SwitchToYellow">
                        <Transition.Trigger>
                          <Sequence>
                            <Delay Duration="00:00:01" />
                            <Assign>
                              <Assign.To>
                                <OutArgument x:TypeArguments="x:Int32">
                                  <mca:CSharpReference x:TypeArguments="x:Int32">CurrentTime</mca:CSharpReference>
                                </OutArgument>
                              </Assign.To>
                              <Assign.Value>
                                <InArgument x:TypeArguments="x:Int32">
                                  <mca:CSharpValue x:TypeArguments="x:Int32">CurrentTime+1</mca:CSharpValue>
                                </InArgument>
                              </Assign.Value>
                            </Assign>
                            <local:LogFile>
                              <local:LogFile.StringInput>
                                <InArgument x:TypeArguments="x:String">
                                  <mca:CSharpValue x:TypeArguments="x:String">"GreenLight " + CurrentTime.ToString()</mca:CSharpValue>
                                </InArgument>
                              </local:LogFile.StringInput>
                            </local:LogFile>
                          </Sequence>
                        </Transition.Trigger>
                        <Transition.Condition>
                          <mca:CSharpValue x:TypeArguments="x:Boolean">CurrentTime&gt;iYellowLightDelay</mca:CSharpValue>
                        </Transition.Condition>
                        <Transition.To>
                          <State x:Name="__ReferenceID2" DisplayName="YellowLight">
                            <State.Entry>
                              <Sequence>
                                <Assign>
                                  <Assign.To>
                                    <OutArgument x:TypeArguments="x:Int32">
                                      <mca:CSharpReference x:TypeArguments="x:Int32">CurrentTime</mca:CSharpReference>
                                    </OutArgument>
                                  </Assign.To>
                                  <Assign.Value>
                                    <InArgument x:TypeArguments="x:Int32">0</InArgument>
                                  </Assign.Value>
                                </Assign>
                                <WriteLine Text="Yellow Light" />
                              </Sequence>
                            </State.Entry>
                            <State.Exit>
                              <WriteLine Text="Exit Yellow Light" />
                            </State.Exit>
                            <State.Transitions>
                              <Transition DisplayName="SwitchToRed">
                                <Transition.Trigger>
                                  <Sequence>
                                    <Delay Duration="00:00:01" />
                                    <Assign>
                                      <Assign.To>
                                        <OutArgument x:TypeArguments="x:Int32">
                                          <mca:CSharpReference x:TypeArguments="x:Int32">CurrentTime</mca:CSharpReference>
                                        </OutArgument>
                                      </Assign.To>
                                      <Assign.Value>
                                        <InArgument x:TypeArguments="x:Int32">
                                          <mca:CSharpValue x:TypeArguments="x:Int32">CurrentTime+1</mca:CSharpValue>
                                        </InArgument>
                                      </Assign.Value>
                                    </Assign>
                                    <local:LogFile>
                                      <local:LogFile.StringInput>
                                        <InArgument x:TypeArguments="x:String">
                                          <mca:CSharpValue x:TypeArguments="x:String">"YellowLight "+CurrentTime.ToString()</mca:CSharpValue>
                                        </InArgument>
                                      </local:LogFile.StringInput>
                                    </local:LogFile>
                                  </Sequence>
                                </Transition.Trigger>
                                <Transition.To>
                                  <x:Reference>__ReferenceID0</x:Reference>
                                </Transition.To>
                                <Transition.Condition>
                                  <mca:CSharpValue x:TypeArguments="x:Boolean">CurrentTime&gt;iRedLightDelay</mca:CSharpValue>
                                </Transition.Condition>
                              </Transition>
                            </State.Transitions>
                          </State>
                        </Transition.To>
                      </Transition>
                    </State.Transitions>
                  </State>
                </Transition.To>
              </Transition>
            </State.Transitions>
          </State>
        </StateMachine.InitialState>
        <x:Reference>__ReferenceID0</x:Reference>
        <x:Reference>__ReferenceID1</x:Reference>
        <x:Reference>__ReferenceID2</x:Reference>
        <StateMachine.Variables>
          <Variable x:TypeArguments="x:Int32" Name="CurrentTime" />
        </StateMachine.Variables>
      </StateMachine>
      <Sequence>
        <While>
          <While.Condition>
            <mca:CSharpValue x:TypeArguments="x:Boolean">0&lt;0</mca:CSharpValue>
          </While.Condition>
          <Sequence />
        </While>
      </Sequence>
      <sads:DebugSymbol.Symbol>d1FDOlxVc2Vyc1xMZW9uYXJcc291cmNlXHJlcG9zXFdmLUhlbGxvV29ybGRcSGVsbG9Xb3JsZEFjdGl2aXRpZXNcVHJhZmZpY0xpZ2h0LnhhbWw/AXsBfQEEAaQBAaYBAQMBygEBzAEBAjMD6gEOAgEBNwXgARQCAQvhAQXoARACAQI5CdgBEQIBbmoR1AEZAgE9mwEZ0AEhAgEM4gEH5wEPAgEDOw1HGAMBkwFKDUpeAwGRAU8RZBwCAXdnEWdvAgFwbBV4IAIBYnsVe2gCAWCAARmVASQCAUaYARmYAXgCAT+dAR2pASgCATGsAR2sAXECAS+xASHGASwCARXMASHMAX0CAQ7mAQnmAUMCAQrkAQvkAVACAQQ8D0UYAwGWAUYPRlsDAZQBSktKWwMBkgFQE1BaAwGPAVETXBwDAYABXRNjIwIBeG0XdiACAWV3F3dlAgFje1N7ZQIBYYEBG4EBYgIBXoIBG40BJAIBT44BG5QBKwIBR54BH6cBKAIBNKgBH6gBbgIBMqwBW6wBbgIBMLIBI7IBagIBLbMBI74BLAIBHr8BI8UBMwIBFkM5QzoDAZ4BPxU/ZQMBlwFGTUZYAwGVAVAjUC0DAZABWRlZYwMBiAFUGVRpAwGBAWAZYHwCAXl0QXRCAgFtcB1wbQIBZndVd2ICAWSBASuBATUCAV+KASGKAWsCAVeFASGFAXECAVCRASGRAYUBAgFIpQFJpQFKAgE8oQEloQF1AgE1qAFdqAFrAgEzsgEzsgE9AgEuuwEpuwFzAgEmtgEptgF5AgEfwgEpwgGMAQIBFw==</sads:DebugSymbol.Symbol>
    </Sequence>
  </local:TrafficLight.Implementation>
</local:TrafficLight>